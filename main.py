
import discord
from discord.ext import commands
import json
import aiohttp
from bs4 import BeautifulSoup
import re
import asyncio
import os
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env (–≤–∞–∂–ª–∏–≤–æ –¥–ª—è Render —ñ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É!)
load_dotenv()

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.messages = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

DB_FILE = "games_db.json"
SELECT_MENU_FILE = "select_menu_ids.json"

def load_json(file_name):
    if os.path.exists(file_name):
        with open(file_name, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_json(file_name, data):
    with open(file_name, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

async def search_game_on_steam(game_name):
    query = f"site:store.steampowered.com {game_name}"
    url = f"https://www.google.com/search?q={query}"
    headers = {"User-Agent": "Mozilla/5.0"}

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, headers=headers) as resp:
                text = await resp.text()
                soup = BeautifulSoup(text, "html.parser")
                for link in soup.find_all("a", href=True):
                    href = link["href"]
                    match = re.search(r"https://store\.steampowered\.com/app/\d+/.+?/", href)
                    if match:
                        title = link.get_text()
                        return title.strip()
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É: {e}")
    return None

def parse_game_names(message):
    return [part.strip() for part in re.split(r"[,\\n]+|\s{2,}", message) if part.strip()]

@bot.event
async def on_ready():
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —è–∫ {bot.user}")

@bot.event
async def on_message(message):
    if message.author.bot:
        return

    if message.channel.name == "–∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏-–≥—Ä—É":
        content = message.content.strip()
        game_names = parse_game_names(content)
        db = load_json(DB_FILE)

        for game in game_names:
            if game in db:
                continue

            steam_title = await search_game_on_steam(game)
            if not steam_title:
                await message.channel.send(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≥—Ä—É **{game}** –≤ Steam.")
                continue

            await message.channel.send(
                f"‚ùì –ú–æ–∂–ª–∏–≤–æ —Ç–∏ –º–∞–≤ –Ω–∞ —É–≤–∞–∑—ñ: **{steam_title}**?\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π '—Ç–∞–∫' –∞–±–æ '–Ω—ñ' (30 —Å–µ–∫—É–Ω–¥)"
            )

            def check(m):
                return m.author == message.author and m.channel == message.channel and m.content.lower() in ["—Ç–∞–∫", "–Ω—ñ"]

            try:
                reply = await bot.wait_for("message", check=check, timeout=30.0)
            except asyncio.TimeoutError:
                await message.channel.send("‚è∞ –ß–∞—Å –≤–∏—á–µ—Ä–ø–∞–Ω–æ.")
                return

            if reply.content.lower() != "—Ç–∞–∫":
                await message.channel.send("üö´ –ì—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
                return

            guild = message.guild
            role = await guild.create_role(name=steam_title)
            await message.author.add_roles(role)
            await message.channel.send(f"‚úÖ –†–æ–ª—å **{steam_title}** —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –¥–æ–¥–∞–Ω–æ —Ç–æ–±—ñ!")

            db[steam_title] = {"role_id": role.id, "group": 1}
            save_json(DB_FILE, db)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
TOKEN = os.getenv("DISCORD_TOKEN")
if not TOKEN:
    print("‚ùå DISCORD_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–æ–¥–∞–π —Ç–æ–∫–µ–Ω –¥–æ .env –∞–±–æ Render Environment Variables.")
else:
    bot.run(TOKEN)
